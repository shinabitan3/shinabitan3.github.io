<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QRコードメーカー</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
    <style>
        body {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            background-color: #f5f7fa;
            color: #333;
            margin: 0;
            padding: 20px;
            line-height: 1.6;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        h1, h2 {
            color: #2c3e50;
            text-align: center;
        }
        .options-area {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            flex-wrap: wrap;
            background-color: #f0f4f8;
            padding: 15px;
            border-radius: 5px;
        }
        .option-group {
            margin: 10px;
        }
        button {
            padding: 12px 20px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
            margin: 5px;
        }
        button:hover {
            background-color: #2980b9;
        }
        button.add-btn {
            background-color: #2ecc71;
        }
        button.add-btn:hover {
            background-color: #27ae60;
        }
        button.remove-btn {
            background-color: #e74c3c;
        }
        button.remove-btn:hover {
            background-color: #c0392b;
        }
        button.active {
            background-color: #2c3e50;
            font-weight: bold;
        }
        .action-buttons {
            text-align: center;
            margin: 20px 0;
        }
        .mode-selector {
            display: flex;
            justify-content: center;
            margin: 15px 0;
            background-color: #f9f9f9;
            padding: 10px;
            border-radius: 5px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        table th, table td {
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
        }
        table th {
            background-color: #f2f2f2;
            position: sticky;
            top: 0;
        }
        .qr-cell {
            text-align: center;
        }
        .results-container, .input-container {
            margin-top: 30px;
            overflow-x: auto;
        }
        .excel-template {
            margin-top: 20px;
            border: 1px dashed #ccc;
            padding: 15px;
            border-radius: 5px;
            background-color: #f9f9f9;
        }
        .file-input {
            margin: 10px 0;
        }
        .help-text {
            color: #777;
            font-size: 14px;
            margin: 5px 0;
        }
        .status {
            margin: 15px 0;
            padding: 10px;
            border-radius: 5px;
            display: none;
        }
        .success {
            background-color: #d4edda;
            color: #155724;
        }
        .error {
            background-color: #f8d7da;
            color: #721c24;
        }
        .warning {
            background-color: #fff3cd;
            color: #856404;
        }
        .loading {
            text-align: center;
            margin: 20px 0;
            display: none;
        }
        .spinner {
            border: 5px solid #f3f3f3;
            border-top: 5px solid #3498db;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 2s linear infinite;
            display: inline-block;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .input-cell {
            padding: 0;
        }
        .input-cell input {
            width: 100%;
            padding: 10px;
            border: none;
            box-sizing: border-box;
            font-family: inherit;
            font-size: inherit;
        }
        .input-cell input:focus {
            outline: 2px solid #3498db;
        }
        .excel-paste-area {
            text-align: center;
            margin: 20px 0;
        }
        .paste-textarea {
            width: 90%;
            height: 100px;
            padding: 10px;
            border: 1px dashed #aaa;
            border-radius: 5px;
            font-family: inherit;
            font-size: inherit;
            margin-bottom: 10px;
        }
        .mode-button {
            padding: 10px 20px;
            margin: 0 5px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s;
        }
        .mode-button:not(.active) {
            background-color: #e0e0e0;
            color: #333;
        }
        .mode-button.active {
            background-color: #3498db;
            color: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }
        .date-input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        @media (max-width: 768px) {
            .options-area {
                flex-direction: column;
            }
            .container {
                padding: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>QRコードメーカー</h1>
        
        <div class="mode-selector">
            <button id="url-mode-btn" class="mode-button active" onclick="switchMode('url')">URLモード</button>
            <button id="text-mode-btn" class="mode-button" onclick="switchMode('text')">テキストモード</button>
        </div>
        
        <div class="options-area">
            <div class="option-group">
                <label>QRコードサイズ:</label>
                <select id="qr-size">
                    <option value="150" selected>小 (150px)</option>
                    <option value="200">中 (200px)</option>
                    <option value="300">大 (300px)</option>
                </select>
            </div>
            
            <div class="option-group">
                <label>エラー訂正レベル:</label>
                <select id="qr-error-level">
                    <option value="L">低 (7%)</option>
                    <option value="M">中 (15%)</option>
                    <option value="Q" selected>高 (25%)</option>
                    <option value="H">最高 (30%)</option>
                </select>
            </div>
            
            <div class="option-group">
                <label>Excelテンプレート:</label>
                <input type="file" id="excel-template" class="file-input" accept=".xlsx,.xls">
                <p class="help-text">テンプレートをアップロードすると、QRコード情報がテンプレートに記入されます</p>
            </div>
        </div>
        
        <div class="excel-paste-area">
            <h3>Excelからのデータ貼り付け</h3>
            <p class="help-text">Excelでコピーしたセルをこちらのテキストエリアに貼り付けて「テーブルに反映」ボタンをクリックしてください</p>
            <textarea id="excel-paste" class="paste-textarea" placeholder="ここにExcelからコピーしたデータを貼り付けてください"></textarea>
            <button onclick="parseExcelPaste()">テーブルに反映</button>
        </div>
        
        <div class="action-buttons">
            <button class="add-btn" onclick="addTableRow(5)">行を5つ追加</button>
            <button class="remove-btn" onclick="removeTableRows(5)">行を5つ削除</button>
        </div>
        
        <div class="input-container">
            <h2>入力テーブル</h2>
            <table id="input-table">
                <thead>
                    <tr>
                        <th>No.</th>
                        <th id="content-type-header">QRコード内容 (URL)</th>
                        <th>詳細</th>
                        <th>作成日</th>
                    </tr>
                </thead>
                <tbody id="input-tbody">
                    <!-- 入力行がここに生成されます -->
                </tbody>
            </table>
        </div>
        
        <div class="action-buttons">
            <button onclick="generateAllQRCodes()">QRコード一括生成</button>
            <button onclick="downloadExcel()">Excelでダウンロード</button>
            <button onclick="downloadAllQRCodes()">全QRコード画像ダウンロード</button>
        </div>
        
        <div id="status" class="status"></div>
        
        <div id="loading" class="loading">
            <div class="spinner"></div>
            <p>処理中...</p>
        </div>
        
        <div class="results-container">
            <h2>生成結果</h2>
            <table id="results-table">
                <thead>
                    <tr>
                        <th>No.</th>
                        <th id="result-content-type-header">QRコード内容</th>
                        <th>詳細</th>
                        <th>QRコード</th>
                        <th id="result-url-header">作成日</th>
                    </tr>
                </thead>
                <tbody id="results-body">
                    <!-- 結果がここに表示されます -->
                </tbody>
            </table>
        </div>
    </div>

    <script>
        // QRコードのデータを保存する配列
        let qrCodesData = [];
        let templateWorkbook = null;
        let rowCount = 0;
        let currentMode = 'url'; // 'url' または 'text'
        
        // 今日の日付を取得
        function getTodayDate() {
            const today = new Date();
            const yyyy = today.getFullYear();
            const mm = String(today.getMonth() + 1).padStart(2, '0');
            const dd = String(today.getDate()).padStart(2, '0');
            return `${yyyy}-${mm}-${dd}`;
        }
        
        // ページ読み込み時に初期入力行を追加
        window.onload = function() {
            addTableRow(10); // 初期値として10行の入力欄を追加
        };
        
        // モードを切り替える
        function switchMode(mode) {
            if (mode === currentMode) return;
            
            currentMode = mode;
            
            // ボタンの見た目を更新
            document.getElementById('url-mode-btn').classList.toggle('active', mode === 'url');
            document.getElementById('text-mode-btn').classList.toggle('active', mode === 'text');
            
            // ヘッダーテキストを更新
            const contentHeader = document.getElementById('content-type-header');
            const resultContentHeader = document.getElementById('result-content-type-header');
            
            if (mode === 'url') {
                contentHeader.textContent = 'QRコード内容 (URL)';
                resultContentHeader.textContent = 'QRコード内容';
            } else {
                contentHeader.textContent = 'QRコード内容 (テキスト)';
                resultContentHeader.textContent = 'QRコード内容';
            }
            
            // プレースホルダーテキストを更新
            const inputRows = document.querySelectorAll('.input-cell input[id^="url-"]');
            inputRows.forEach(input => {
                input.placeholder = mode === 'url' ? 'https://example.com' : 'テキストを入力してください';
            });
            
            showStatus(`${mode === 'url' ? 'URL' : 'テキスト'}モードに切り替えました`, 'success');
        }
        
        // 入力テーブルに行を追加
        function addTableRow(count) {
            const tbody = document.getElementById('input-tbody');
            const today = getTodayDate();
            
            for (let i = 0; i < count; i++) {
                rowCount++;
                
                const row = document.createElement('tr');
                row.id = `row-${rowCount}`;
                
                row.innerHTML = `
                    <td>${rowCount}</td>
                    <td class="input-cell">
                        <input type="text" id="url-${rowCount}" placeholder="${currentMode === 'url' ? 'https://example.com' : 'テキストを入力してください'}">
                    </td>
                    <td class="input-cell">
                        <input type="text" id="desc-${rowCount}" placeholder="詳細（任意）">
                    </td>
                    <td class="input-cell">
                        <input type="date" id="date-${rowCount}" value="${today}" class="date-input">
                    </td>
                `;
                
                tbody.appendChild(row);
            }
        }
        
        // Excelの貼り付けデータを解析してテーブルに反映
        function parseExcelPaste() {
            const pasteData = document.getElementById('excel-paste').value.trim();
            if (!pasteData) {
                showStatus('貼り付けるデータがありません', 'error');
                return;
            }
            
            // 行に分割
            const rows = pasteData.split(/\r?\n/);
            if (rows.length === 0) {
                showStatus('有効なデータが見つかりません', 'error');
                return;
            }
            
            // 入力テーブルをクリア
            document.getElementById('input-tbody').innerHTML = '';
            rowCount = 0;
            
            // 必要な行数を追加
            addTableRow(rows.length);
            
            // データを入力
            rows.forEach((row, index) => {
                const rowNum = index + 1;
                const cells = row.split(/\t/);
                
                // URLまたはテキストを設定（最初の列）
                if (cells.length > 0 && cells[0]) {
                    const urlInput = document.getElementById(`url-${rowNum}`);
                    if (urlInput) {
                        urlInput.value = cells[0].trim();
                    }
                }
                
                // 詳細を設定（2番目の列があれば）
                if (cells.length > 1 && cells[1]) {
                    const descInput = document.getElementById(`desc-${rowNum}`);
                    if (descInput) {
                        descInput.value = cells[1].trim();
                    }
                }
                
                // 作成日を設定（3番目の列があれば）
                if (cells.length > 2 && cells[2]) {
                    const dateInput = document.getElementById(`date-${rowNum}`);
                    if (dateInput) {
                        // 日付形式の変換を試みる
                        try {
                            const dateStr = cells[2].trim();
                            const dateObj = new Date(dateStr);
                            if (!isNaN(dateObj.getTime())) {
                                const yyyy = dateObj.getFullYear();
                                const mm = String(dateObj.getMonth() + 1).padStart(2, '0');
                                const dd = String(dateObj.getDate()).padStart(2, '0');
                                dateInput.value = `${yyyy}-${mm}-${dd}`;
                            }
                        } catch (e) {
                            console.warn('日付形式の変換に失敗しました:', cells[2]);
                        }
                    }
                }
            });
            
            showStatus(`${rows.length}行のデータをテーブルに反映しました`, 'success');
        }
        
        // 入力テーブルから行を削除
        function removeTableRows(count) {
            const tbody = document.getElementById('input-tbody');
            
            for (let i = 0; i < count; i++) {
                if (rowCount <= 0) break;
                
                const row = document.getElementById(`row-${rowCount}`);
                if (row) {
                    tbody.removeChild(row);
                    rowCount--;
                }
            }
        }
        
        // Excelテンプレートの読み込み
        document.getElementById('excel-template').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = new Uint8Array(e.target.result);
                    templateWorkbook = XLSX.read(data, { type: 'array' });
                    showStatus('テンプレートを読み込みました: ' + file.name, 'success');
                } catch (error) {
                    showStatus('テンプレートの読み込みに失敗しました: ' + error.message, 'error');
                    console.error(error);
                }
            };
            reader.readAsArrayBuffer(file);
        });
        
        // すべてのQRコードを生成
        function generateAllQRCodes() {
            qrCodesData = [];
            let hasData = false;
            
            // 入力テーブルからデータを収集
            for (let i = 1; i <= rowCount; i++) {
                const urlInput = document.getElementById(`url-${i}`);
                const descInput = document.getElementById(`desc-${i}`);
                const dateInput = document.getElementById(`date-${i}`);
                
                if (urlInput && urlInput.value.trim()) {
                    let content = urlInput.value.trim();
                    const description = descInput ? descInput.value.trim() : '';
                    const creationDate = dateInput ? dateInput.value : getTodayDate();
                    
                    // URLモードの場合、プロトコルがなければ追加
                    if (currentMode === 'url' && !content.match(/^https?:\/\/.+/i)) {
                        content = 'http://' + content;
                    }
                    
                    qrCodesData.push({
                        number: qrCodesData.length + 1,
                        content: content,
                        description: description,
                        creationDate: creationDate,
                        qrCodeDataUrl: null,
                        isUrl: currentMode === 'url'
                    });
                    
                    hasData = true;
                }
            }
            
            if (!hasData) {
                showStatus(`${currentMode === 'url' ? 'URL' : 'テキスト'}を少なくとも1つ入力してください`, 'error');
                return;
            }
            
            showLoading(true);
            document.getElementById('results-body').innerHTML = '';
            
            // テーブルを生成
            renderTable();
            
            // QRコードを生成
            generateQRCodes().then(() => {
                showStatus('QRコードの生成が完了しました', 'success');
                showLoading(false);
            }).catch(error => {
                showStatus('エラーが発生しました: ' + error.message, 'error');
                showLoading(false);
                console.error(error);
            });
        }
        
        // QRコードを生成する非同期関数（QRiousライブラリ使用）
        async function generateQRCodes() {
            const size = parseInt(document.getElementById('qr-size').value);
            const errorCorrectionLevel = document.getElementById('qr-error-level').value;
            
            // 各QRコードを順番に生成
            for (let i = 0; i < qrCodesData.length; i++) {
                const data = qrCodesData[i];
                
                try {
                    // キャンバス要素を作成
                    const canvas = document.createElement('canvas');
                    canvas.width = size;
                    canvas.height = size;
                    
                    // QRiousを使用してQRコードを生成
                    const qr = new QRious({
                        element: canvas,
                        value: data.content,
                        size: size,
                        level: errorCorrectionLevel
                    });
                    
                    // キャンバスからデータURLを取得
                    data.qrCodeDataUrl = canvas.toDataURL('image/png');
                    
                    // テーブルセルを更新
                    updateQRCodeCell(i);
                    
                    // わずかに遅延させて処理を分散
                    await new Promise(resolve => setTimeout(resolve, 10));
                    
                } catch (error) {
                    console.error(`QRコード #${i+1} 生成エラー:`, error);
                    showStatus(`QRコード #${i+1} の生成中にエラーが発生しました: ${error.message}`, 'warning');
                    
                    // エラーが発生してもすべてを停止せず、次に進む
                    data.qrCodeDataUrl = null;
                    updateQRCodeErrorCell(i, error);
                }
            }
        }
        
        // テーブルを初期レンダリング
        function renderTable() {
            const tbody = document.getElementById('results-body');
            tbody.innerHTML = '';
            
            qrCodesData.forEach((data, index) => {
                const row = document.createElement('tr');
                
                // 日付の表示形式を整える
                let displayDate = data.creationDate;
                try {
                    const dateObj = new Date(data.creationDate);
                    if (!isNaN(dateObj.getTime())) {
                        displayDate = `${dateObj.getFullYear()}-${String(dateObj.getMonth() + 1).padStart(2, '0')}-${String(dateObj.getDate()).padStart(2, '0')}`;
                    }
                } catch (e) {
                    console.warn('日付形式の変換に失敗しました:', data.creationDate);
                }
                
                row.innerHTML = `
                    <td>${data.number}</td>
                    <td>${escapeHtml(data.content)}</td>
                    <td>${escapeHtml(data.description)}</td>
                    <td class="qr-cell" id="qr-cell-${index}"><div class="spinner"></div></td>
                    <td>${displayDate}</td>
                `;
                
                tbody.appendChild(row);
            });
        }
        
        // QRコードセルを更新
        function updateQRCodeCell(index) {
            const cell = document.getElementById(`qr-cell-${index}`);
            if (!cell) return;
            
            const data = qrCodesData[index];
            if (data.qrCodeDataUrl) {
                cell.innerHTML = `
                    <img src="${data.qrCodeDataUrl}" alt="QR Code" style="max-width: 150px;">
                `;
            }
        }
        
        // QRコードエラーセルを更新
        function updateQRCodeErrorCell(index, error) {
            const cell = document.getElementById(`qr-cell-${index}`);
            if (!cell) return;
            
            cell.innerHTML = `
                <div style="color: #e74c3c;">エラー: QRコードを生成できませんでした</div>
            `;
        }
        
        // Excelでダウンロード
        function downloadExcel() {
            if (qrCodesData.length === 0) {
                showStatus('ダウンロードするデータがありません。先にQRコードを生成してください。', 'error');
                return;
            }
            
            showLoading(true);
            
            try {
                let workbook;
                
                if (templateWorkbook) {
                    // テンプレートがある場合はそれを使用
                    workbook = XLSX.utils.book_new();
                    // シートをコピー
                    for (let i = 0; i < templateWorkbook.SheetNames.length; i++) {
                        const sheetName = templateWorkbook.SheetNames[i];
                        const worksheet = templateWorkbook.Sheets[sheetName];
                        XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);
                    }
                    
                    // 最初のシートを取得
                    const sheetName = workbook.SheetNames[0];
                    const worksheet = workbook.Sheets[sheetName];
                    
                    // データをテンプレートに書き込む
                    qrCodesData.forEach((data, index) => {
                        // 行が1から始まるため、ヘッダー行を考慮して+2する
                        const rowIndex = index + 2;
                        
                        // A列: QRコード内容
                        worksheet[`A${rowIndex}`] = { t: 's', v: data.content };
                        
                        // B列: 詳細
                        worksheet[`B${rowIndex}`] = { t: 's', v: data.description || '' };
                        
                        // E列: 作成日
                        worksheet[`E${rowIndex}`] = { t: 's', v: data.creationDate || '' };
                    });
                } else {
                    // 新しいワークブックを作成
                    workbook = XLSX.utils.book_new();
                    
                    // データを準備
                    const wsData = [
                        ['QRコード内容', '詳細', 'QRコード', '作成日'],
                        ...qrCodesData.map(data => [data.content, data.description || '', '(QRコード画像)', data.creationDate || ''])
                    ];
                    
                    // ワークシートを作成
                    const worksheet = XLSX.utils.aoa_to_sheet(wsData);
                    
                    // 行の高さを設定 (SheetJSでは直接サポートされていないので擬似的に)
                    if (!worksheet['!rows']) worksheet['!rows'] = [];
                    for (let i = 1; i <= qrCodesData.length; i++) {
                        worksheet['!rows'][i] = { hpt: 150 }; // 行の高さをポイント単位で指定 (約26mm)
                    }
                    
                    // 列の幅を設定
                    worksheet['!cols'] = [
                        { wch: 40 }, // A列: QRコード内容
                        { wch: 30 }, // B列: 詳細
                        { wch: 26 }, // C列: QRコード (画像用の幅)
                        { wch: 15 }  // D列: 作成日
                    ];
                    
                    // ワークブックに追加
                    XLSX.utils.book_append_sheet(workbook, worksheet, 'QRコード一覧');
                }
                
                // Excelファイルを生成してダウンロード
                XLSX.writeFile(workbook, 'qr_codes.xlsx');
                
                showStatus('Excelファイルをダウンロードしました', 'success');
            } catch (error) {
                showStatus('Excelファイルの生成に失敗しました: ' + error.message, 'error');
                console.error(error);
            }
            
            showLoading(false);
        }
        
        // すべてのQRコード画像をダウンロード
        function downloadAllQRCodes() {
            const validQRCodes = qrCodesData.filter(data => data.qrCodeDataUrl);
            
            if (validQRCodes.length === 0) {
                showStatus('ダウンロードするQRコードがありません。先にQRコードを生成してください。', 'error');
                return;
            }
            
            showStatus(`${validQRCodes.length}個のQRコード画像のダウンロードを開始します...`, 'success');
            
            // ダウンロード処理を少し遅延させてUIを更新
            setTimeout(() => {
                // すべてのQRコード画像を個別にダウンロード
                validQRCodes.forEach((data, index) => {
                    const link = document.createElement('a');
                    link.href = data.qrCodeDataUrl;
                    link.download = `qrcode-${data.number}.png`;
                    document.body.appendChild(link);
                    
                    // 少し遅延させてダウンロードを開始
                    setTimeout(() => {
                        link.click();
                        document.body.removeChild(link);
                    }, 100 * index);
                });
            }, 500);
        }
        
        // ステータスメッセージを表示
        function showStatus(message, type) {
            const statusDiv = document.getElementById('status');
            statusDiv.textContent = message;
            statusDiv.className = 'status ' + type;
            statusDiv.style.display = 'block';
            
            // 5秒後に非表示（エラーの場合は10秒）
            const timeout = type === 'error' ? 10000 : 5000;
            setTimeout(() => {
                statusDiv.style.display = 'none';
            }, timeout);
        }
        
        // ローディング表示を切り替え
        function showLoading(show) {
            document.getElementById('loading').style.display = show ? 'block' : 'none';
        }
        
        // HTMLをエスケープ
        function escapeHtml(text) {
            if (!text) return '';
            return text
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }
    </script>
</body>
</html>
